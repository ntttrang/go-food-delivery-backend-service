// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/food/food.proto

package food

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Food_GetFooodsByIds_FullMethodName = "/Food/GetFooodsByIds"
	Food_UpdateFoodById_FullMethodName = "/Food/UpdateFoodById"
)

// FoodClient is the client API for Food service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodClient interface {
	GetFooodsByIds(ctx context.Context, in *GetFoodIdsRequest, opts ...grpc.CallOption) (*FoodIdsResp, error)
	UpdateFoodById(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResp, error)
}

type foodClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodClient(cc grpc.ClientConnInterface) FoodClient {
	return &foodClient{cc}
}

func (c *foodClient) GetFooodsByIds(ctx context.Context, in *GetFoodIdsRequest, opts ...grpc.CallOption) (*FoodIdsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FoodIdsResp)
	err := c.cc.Invoke(ctx, Food_GetFooodsByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodClient) UpdateFoodById(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFoodResp)
	err := c.cc.Invoke(ctx, Food_UpdateFoodById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodServer is the server API for Food service.
// All implementations must embed UnimplementedFoodServer
// for forward compatibility.
type FoodServer interface {
	GetFooodsByIds(context.Context, *GetFoodIdsRequest) (*FoodIdsResp, error)
	UpdateFoodById(context.Context, *UpdateFoodRequest) (*UpdateFoodResp, error)
	mustEmbedUnimplementedFoodServer()
}

// UnimplementedFoodServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFoodServer struct{}

func (UnimplementedFoodServer) GetFooodsByIds(context.Context, *GetFoodIdsRequest) (*FoodIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFooodsByIds not implemented")
}
func (UnimplementedFoodServer) UpdateFoodById(context.Context, *UpdateFoodRequest) (*UpdateFoodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoodById not implemented")
}
func (UnimplementedFoodServer) mustEmbedUnimplementedFoodServer() {}
func (UnimplementedFoodServer) testEmbeddedByValue()              {}

// UnsafeFoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodServer will
// result in compilation errors.
type UnsafeFoodServer interface {
	mustEmbedUnimplementedFoodServer()
}

func RegisterFoodServer(s grpc.ServiceRegistrar, srv FoodServer) {
	// If the following call pancis, it indicates UnimplementedFoodServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Food_ServiceDesc, srv)
}

func _Food_GetFooodsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).GetFooodsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Food_GetFooodsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).GetFooodsByIds(ctx, req.(*GetFoodIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Food_UpdateFoodById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).UpdateFoodById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Food_UpdateFoodById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).UpdateFoodById(ctx, req.(*UpdateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Food_ServiceDesc is the grpc.ServiceDesc for Food service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Food_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Food",
	HandlerType: (*FoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFooodsByIds",
			Handler:    _Food_GetFooodsByIds_Handler,
		},
		{
			MethodName: "UpdateFoodById",
			Handler:    _Food_UpdateFoodById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/food/food.proto",
}
